function Evaluation_exploitation(gMLC_name,n)
% Function to evaluate the individuals generated by the exploitation phase.
% This function should be modified for your own real or numerical experiment.
% Note that this version, evaluates only the necessary steps.
%
% See also Evaluation_exploitation_all.m
%
% Guy Y. Cornejo Maceda, 14/04/2024

% Copyright: 2024 Guy Cornejo Maceda (gy.cornejo.maceda@gmail.com)
% CC-BY-SA

%% Initialization
Initialization;
gmlc=gMLC;
gmlc.load(gMLC_name);
costs = gmlc.simplex.costs;

%% Load the exploitation control laws of the current phase
ControlLaws = load(fullfile('save_runs',gMLC_name,'Sets',['Set',num2str(n),'_EXI.mat']));
ControlLaws = ControlLaws.Set;
% --- Indices of the different simplex individuals 
IDr = 1; % - Reflection
IDe = 2; % - Reflection
IDc = 3; % - Contraction
IDs = 4:size(ControlLaws,1); % - Shrink
% --- Costs of the current simplex
J1 = costs(1); % - Best 
Jend_minus_one = costs(end-1); % - Second worst
Jend = costs(end); % - Worst

%% Evaluate the control laws following the steps of downhill simplex
% --- Reflection
ExternalFunctionTest_problem(ControlLaws(IDr,2),gmlc.parameters,ControlLaws{IDr,1},'',0);
disp(ControlLaws{IDr,1})
Jr = load(sprintf('OUTPUT/Costs/ID%i.dat',IDr),'-ascii');

if Jr >= Jend_minus_one
    % --- Contraction
    ExternalFunctionTest_problem(ControlLaws(IDc,2),gmlc.parameters,ControlLaws{IDc,1},'',0);
    disp(ControlLaws{IDc,1})
    Jc = load(sprintf('OUTPUT/Costs/ID%i.dat',IDc),'-ascii');
    if Jc >= Jend
        % --- Shrink
        for p=IDs
        ExternalFunctionTest_problem(ControlLaws(p,2),gmlc.parameters,ControlLaws{p,1},'',0);
        disp(ControlLaws{p,1})
        end
    end
elseif Jr<J1 
    % --- Expansion
    ExternalFunctionTest_problem(ControlLaws(IDe,2),gmlc.parameters,ControlLaws{IDe,1},'',0);
    disp(ControlLaws{IDe,1})
end



